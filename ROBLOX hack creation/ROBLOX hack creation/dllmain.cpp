#pragma once
#include "dllmain.h"

#define IDC_LUAC_EDIT 141
#define IDC_LUAC_EXECUTE_BUTTON 142

using namespace luabridge;

HINSTANCE hInst;
wchar_t szTitle[MAX_PATH];
wchar_t szWindowClass[MAX_PATH];
WNDCLASSEXW wc = { 0 };
HWND Mainhwnd, LuaCEdit;

int* luaState = 0;

#define ReCa reinterpret_cast

ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
void                RegisterDialogClass(HWND hWnd);

DWORD WINAPI Main(LPVOID lpvoid)
{
	if (!RFunc::Initialize())
		return NULL;

	// ?? ?? ?? ?? ?? 08 ?? 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 08 00 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 05 00 00 00
	const char* sig = "?????\x08?\x00????????????????????????????????????\x08\x00\x00\x00\x00\x00\x00\x00????????????\x05\x00\x00\x00";

	if (!Scan(&luaState, exeName, sig, 68)) // May crash
		return NULL;

	hInst = (HINSTANCE)lpvoid;

	wcscpy_s(szTitle, L"Roblox Hack Lua C ONLY");
	wcscpy_s(szWindowClass, L"ROBLOXHACK");

	MyRegisterClass(hInst);

	if (!InitInstance(hInst, SW_SHOW))
		return FALSE;

	HACCEL hAccelTable = LoadAcceleratorsW(hInst, szWindowClass);

	MSG msg;

	while (GetMessage(&msg, nullptr, 0, 0))
	{
		if (!TranslateAcceleratorW(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	return NULL;
}

ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = WndProc;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = hInstance;
	wcex.hIcon = NULL;
	wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
	wcex.lpszMenuName = NULL;
	wcex.lpszClassName = szWindowClass;
	wcex.hIconSm = NULL;

	return RegisterClassEx(&wcex);
}

BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
	hInst = hInstance;

	Mainhwnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, 0, 425, 400, NULL, NULL, hInstance, NULL);

	if (!Mainhwnd)
		return FALSE;

	ShowWindow(Mainhwnd, nCmdShow);
	UpdateWindow(Mainhwnd);

	return TRUE;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{
	case WM_CREATE:
	{
		RegisterDialogClass(hWnd);
	}
	break;
	case WM_COMMAND:
	{
		int wmId = LOWORD(wParam);

		switch (wmId)
		{
		case IDC_LUAC_EXECUTE_BUTTON:
		{
			int length = GetWindowTextLengthA(LuaCEdit);

			char* buf = new char[length + 1];
			ZeroMemory(buf, length);

			GetWindowTextA(LuaCEdit, buf, length + 1);

			LuaC::Parse(buf);
		}
		break;
		}
	}
	break;
	case WM_CLOSE:
	{
		PostQuitMessage(NULL);
	}
	break;
	default:
		return DefWindowProcA(hWnd, message, wParam, lParam);
	}

	return 0;
}

void RegisterDialogClass(HWND hWnd)
{
	RECT rect;
	GetClientRect(hWnd, &rect);

	wc.cbSize = sizeof(WNDCLASSEXW);
	wc.lpfnWndProc = (WNDPROC)WndProc;
	wc.hInstance = hInst;
	wc.hbrBackground = (HBRUSH)1;
	wc.lpszClassName = L"DialogClass";
	RegisterClassExW(&wc);

	LuaCEdit = CreateWindowA("EDIT", "",
		WS_VISIBLE | WS_CHILD | WS_BORDER | ES_CENTER | ES_AUTOHSCROLL | ES_MULTILINE | ES_AUTOVSCROLL | WS_VSCROLL,
		5, 5, 400, 300, hWnd, (HMENU)IDC_LUAC_EDIT, hInst, NULL);

	CreateWindowA("BUTTON", "Execute",
		WS_VISIBLE | WS_CHILD | BS_PUSHBUTTON,
		5, 310, 400, 40, hWnd, (HMENU)IDC_LUAC_EXECUTE_BUTTON, hInst, NULL);
}

BOOL APIENTRY DllMain(HMODULE hModule,
	DWORD  ul_reason_for_call,
	LPVOID lpReserved
)
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
	{
		CreateThread(0, 0, Main, hModule, 0, 0);
	}
	break;
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return NULL;
}
