#include "LuaC.h"

enum LuaC_OPCODES
{
	NOTHING,
	OP_GETGLOBAL,
	OP_GETFIELD,
	OP_SETGLOBAL,
	OP_SETFIELD,
	OP_PCALL,
	OP_CALL,
	OP_PUSHNIL,
	OP_PUSHSTRING,
	OP_PUSHVALUE,
	OP_PUSHNUMBER,
	OP_PUSHBOOLEAN,
	OP_SETTOP,
	OP_POP,
	OP_WAIT,
	OP_EMPTYSTACK
};

LuaC_OPCODES returnop(string func)
{
	if ("getglobal" == func) return OP_GETGLOBAL;
	if ("getfield" == func) return OP_GETFIELD;
	if ("setglobal" == func) return OP_SETGLOBAL;
	if ("setfield" == func) return OP_SETFIELD;
	if ("pcall" == func) return OP_PCALL;
	if ("call" == func) return OP_CALL;
	if ("pushnil" == func) return OP_PUSHNIL;
	if ("pushstring" == func) return OP_PUSHSTRING;
	if ("pushvalue" == func) return OP_PUSHVALUE;
	if ("pushnumber" == func) return OP_PUSHNUMBER;
	if ("pushboolean" == func) return OP_PUSHBOOLEAN;
	if ("settop" == func) return OP_SETTOP;
	if ("pop" == func) return OP_POP;
	if ("wait" == func) return OP_WAIT;
	if ("emptystack" == func) return OP_EMPTYSTACK;
	
	return NOTHING;
}

BOOL LuaC::Execute(LPSTR script)
{
	char* buffer, *buffer1, *next;

	buffer = strtok_s(script, " ", &next);
	if (strlen(buffer) == NULL)
		return FALSE;

	switch (returnop(script))
	{
	case OP_GETGLOBAL:
	{
		if (strlen(next) == NULL)
			return FALSE;

		rlua_getglobal(luaState, next);
	}
		break;
	case OP_GETFIELD:
	{
		buffer = strtok_s(NULL, " ", &next);
		if (strlen(buffer) == NULL
			|| strlen(next) == NULL)
			return FALSE;

		rlua_getfield(luaState, stoi(buffer), next);
	}
		break;
	case OP_SETGLOBAL:
	{
		if (strlen(next) == NULL)
			return FALSE;

		rlua_setglobal(luaState, next);
	}
		break;
	case OP_SETFIELD:
	{
		buffer = strtok_s(NULL, " ", &next);
		if (strlen(buffer) == NULL
			|| strlen(next) == NULL)
			return FALSE;

		rlua_setfield(luaState, stoi(buffer), next);
	}
		break;
	case OP_PCALL:
	{
		buffer = strtok_s(NULL, " ", &next);
		if (strlen(buffer) == NULL
			|| strlen(next) == NULL)
			return FALSE;

		buffer1 = strtok_s(NULL, " ", &next);
		if (strlen(buffer) == NULL
			|| strlen(next) == NULL)
			return FALSE;

		rlua_pcall(luaState, stoi(buffer), stoi(buffer1), stoi(next));
	}
		break;
	case OP_CALL:
	{
		buffer = strtok_s(NULL, " ", &next);
		if (strlen(buffer) == NULL
			|| strlen(next) == NULL)
			return FALSE;

		rlua_call(luaState, stoi(buffer), stoi(next));
	}
		break;
	case OP_PUSHNIL:
	{
		rlua_pushnil(luaState);
	}
		break;
	case OP_PUSHSTRING:
	{
		if (strlen(next) == NULL)
			return FALSE;

		rlua_pushstring(luaState, next);
	}
		break;
	case OP_PUSHVALUE:
	{
		if (strlen(next) == NULL)
			return FALSE;

		rlua_pushvalue(luaState, stoi(next));
	}
		break;
	case OP_PUSHNUMBER:
	{
		if (strlen(next) == NULL)
			return FALSE;

		rlua_pushnumber(luaState, stod(next));
	}
		break;
	case OP_PUSHBOOLEAN:
	{
		if (strlen(next) == NULL)
			return FALSE;

		rlua_pushboolean(luaState, stoi(next));
	}
		break;
	case OP_SETTOP:
	{
		if (strlen(next) == NULL)
			return FALSE;

		rlua_settop(luaState, stoi(next));
	}
		break;
	case OP_POP:
	{
		if (strlen(next) == NULL)
			return FALSE;

		rlua_pop(luaState, stoi(next));
	}
		break;
	case OP_WAIT:
	{
		if (strlen(next) == NULL)
			return FALSE;

		Sleep(stoi(next) * 1000);
	}
		break;
	case OP_EMPTYSTACK:
	{
		rlua_settop(luaState, 0);
	}
		break;
	default:
		break;
	}

	return TRUE;
}

void LuaC::Parse(LPSTR script)
{
	char* buffer = NULL;
	char* next = NULL;

	buffer = strtok_s(script, "\r\n", &next);

	while (buffer != NULL)
	{
		Execute(buffer);

		buffer = strtok_s(NULL, "\r\n", &next);
	}
}
